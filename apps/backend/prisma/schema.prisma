// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  name String
  email String @unique
  avatar String
  passwordHash String
  refreshTokenHash String
  gender String
  dateBirth DateTime?
  role String
  locationDefault String
  createdAt DateTime @default(now())
  exerciseLevel String
  exerciseTypes String[]
  durationTraining String?
  caloriesResetCount Int?
  caloriesSpendPerDayCount Int?
  isReadyUser Boolean?
  comment String?
  certificate String?
  isReadyCoach Boolean?
  purchases Purchase[]
  friendBy Friend[] @relation("user")
  friends  Friend[] @relation("friend")
  foodDiary FoodDiary[]
  exerciseDiary ExerciseDiary[]
  favoriteGyms FavoriteGym[]
  balance UserBalance[]
}

model Exercise {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  title String
  image String
  level String
  type String
  duration String
  price Int
  caloriesCount Int
  description String
  gender String
  video String
  rating Int @default(0)
  coachId String
  isSpecialOffer Boolean 
  buyers Purchase[] 
  exerciseDiary ExerciseDiary[]
}

model Purchase {
  id String @id @default(uuid())
  createdAt DateTime @default(now())
  purchaseType String
  priceExercise Int
  countExercise Int
  sum Int 
  paymentMethod String
  userId String
  user User @relation(fields: [userId], references: [id])
  exerciseId String
  exercise Exercise @relation(fields: [exerciseId], references: [id])
}

model Friend {
  id String @id @default(uuid())
  user User @relation("user", fields: [userId], references: [id])
  userId  String
  friend User @relation("friend", fields: [friendId], references: [id])
  friendId String
}

model FoodDiary {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId  String
  caloriesCount Int
  foodType String
  date DateTime  
}

model ExerciseDiary {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId  String
  exercise Exercise @relation(fields: [exerciseId], references: [id])
  exerciseId String
  caloriesSpentCount Int
  timeSpentExercise Int
  date DateTime
}

model FavoriteGym {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  gymId String
}

model UserBalance {
  id String @id @default(uuid())
  user User @relation(fields: [userId], references: [id])
  userId String
  purchaseType String
  count Int
}

model Subscriber {
  id String @id @default(uuid())
  subscribeDate DateTime @default(now())
  isActiveSubscribe Boolean @default(true)
  userId String
  coachId String
  exercisesId String[]
  lastNotifyDate DateTime @default(now())
}

